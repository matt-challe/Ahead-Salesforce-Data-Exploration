-- TABLE
--- OPPORTUNITY 

-- ADDITIONAL DOCUMENTATION REFERENCE 
--- *add 

-- TABLE OF CONTENTS 
--- QUERY 1: Find unique practice names that contain 'data' in the primary practice column
--- QUERY 2: Find unique practice names that contain 'data' the secondary practice column
--- QUERY 3: Data exploration
--- QUERY 4: How are opps spread amongst the practices? 
--- QUERY 5a: Why are so there so many nulls in the practice field? 
--- QUERY 5b: Which created_by_ids have created 3+ opps with the practice field as null on any given day since 2020?
--- QUERY 6: Are we improving on the number of nulls in the practice field?
--- QUERY 7a: What percent of deals do we win?
--- QUERY 7b: What percent of deals does Data win?
--- QUERY 8a: How many days does it typically take to close a data deal? 
--- QUERY 8b: How does the current stage affect the number of days until close? 
--- QUERY 8c: How does the current stage affect the number of days until a Data opp closes?
--- QUERY 9: How many data deals are 'created and won' within 1 day?
--- QUERY 10: How often is a reason supplied for closing an opp? 
-------------------------------------------------------------------------------------------------
-- AUTHORS
--- Jillian Wedin, Habeeba Mansour, Matt Challe  
-------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------
-- PRE RUN SELECTIONS 
USE WAREHOUSE COMPUTE_WH;
USE ROLE READ_ONLY;
USE SALESFORCE_DATABASE;
USE SCHEMA SALESFORCE;
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-- QUERY 1
--- Find unique practice names that contain 'data' in the primary practice column 

SELECT 
	DISTINCT(ahead_practice_c) AS data_practice_names
FROM opportunity
WHERE LOWER(ahead_practice_c) LIKE '%data%';

-------------------------------------------------------------------------------------------------
-- QUERY 2
--- Find unique practice names that contain 'data' in the secondary practice column

SELECT 
	DISTINCT(ahead_practice_1_c) AS secondary_ahead_practice
FROM opportunity
WHERE LOWER(ahead_practice_1_c) LIKE '%data%';

-------------------------------------------------------------------------------------------------
-- QUERY 3
--- Data exploration

-- select key columns while filtering for data practice 
SELECT 
	name, 
	ahead_practice_c, 
	created_date, 
	fiscal_quarter, 
	fiscal_year, 
	stage_name, 
	is_won, 
	is_closed,
	close_date, 
	parent_territory_c 
FROM opportunity
WHERE LOWER(ahead_practice_c) = 'data' OR LOWER(ahead_practice_c) = 'data (l2)';

-------------------------------------------------------------------------------------------------
-- QUERY 4
--- How are opps spread amongst the practices

SELECT 
	ahead_practice_c AS ahead_practice, 
	COUNT(*) AS num_opps
FROM opportunity
GROUP BY ahead_practice_c
ORDER BY num_opps DESC;

-------------------------------------------------------------------------------------------------
-- QUERY 5a
--- Why are so there so many nulls in the practice field? 

-- count number of nulls in the practice field, grouped by year, since 2020
WITH num_practice_field_nulls_per_year AS (
    SELECT 
        COUNT(*) AS yearly_total_num_opp_w_practice_null, 
        DATE_PART(YEAR, TO_DATE(created_date)) AS opps_year_created
    FROM opportunity
    WHERE ahead_practice_c IS NULL 
        AND opps_year_created >= 2020
    GROUP BY opps_year_created
), 
-- count number of nulls in the practice field generated by each creator id, grouped by year and creator id, since 2020
num_practice_field_nulls_per_id AS (
    SELECT 
        COUNT(*) AS num_opp_w_practice_null, 
        created_by_id AS opps_created_by_id,
        DATE_PART(YEAR,TO_DATE(created_date)) AS year_created_temp
    FROM opportunity
    WHERE ahead_practice_c IS NULL 
        AND year_created_temp >= 2020
    GROUP BY opps_created_by_id, year_created_temp
    HAVING num_opp_w_practice_null >= 10
    ORDER BY num_opp_w_practice_null DESC
),
-- join above ctes for result presentation
join_ctes AS (
    SELECT 
        num_opp_w_practice_null, 
        opps_created_by_id, 
        opps_year_created, 
        yearly_total_num_opp_w_practice_null
    FROM num_practice_field_nulls_per_id AS nulls_per_id_cte
    LEFT JOIN num_practice_field_nulls_per_year AS nulls_per_year_cte
    ON nulls_per_id_cte.year_created_temp = nulls_per_year_cte.opps_year_created
),
-- calculate yearly percent share of nulls generated by creator id, grouped by year
statistics AS (
    SELECT 
        *, 
        100*ROUND(
        num_opp_w_practice_null
        / 
        yearly_total_num_opp_w_practice_null
        ,3) AS yearly_percent_share_of_nulls_created
    FROM join_ctes
),
-- select key columns for presentation
final AS (
    SELECT 
        opps_created_by_id, 
        opps_year_created, 
        num_opp_w_practice_null, 
        yearly_total_num_opp_w_practice_null, 
        yearly_percent_share_of_nulls_created
    FROM statistics
    ORDER BY num_opp_w_practice_null DESC
    LIMIT 10
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 5b
--- Which created_by_ids have created 3+ opps with the practice field as null on any given day since 2020?

-- creates a list of opp creator ids that have generated 3+ opps with a Null in the practice field in a single day since Jan 1 2020
WITH num_practice_field_nulls_per_id AS (
    SELECT 
        COUNT(*) AS num_opp_w_practice_null, 
        created_by_id AS opps_created_by_id, 
        TO_DATE(created_date) AS date_created
    FROM opportunity
    WHERE ahead_practice_c IS NULL 
        AND DATE_PART(YEAR, date_created) >= 2020
    GROUP BY opps_created_by_id, date_created
    HAVING num_opp_w_practice_null >= 3
    ORDER BY num_opp_w_practice_null DESC
),
-- selects unique creator ids from previous cte so as to omit them in the subsequent cte
creator_ids_to_omit_cte AS (
    SELECT 
        DISTINCT(opps_created_by_id) AS creator_ids_to_omit 
    FROM num_practice_field_nulls_per_id
),
-- organizes data to count opps with ahead practice null with above mentioned creator ids omitted, also shows count of creator ids omitted 
final AS (
    SELECT 
        COUNT(*) AS num_opps_w_practice_field_nulls, 
        (SELECT COUNT(creator_ids_to_omit) FROM creator_ids_to_omit_cte) AS num_creator_ids_omitted 
    FROM opportunity
    WHERE created_by_id NOT IN (SELECT * FROM creator_ids_to_omit_cte)
    AND ahead_practice_c IS NULL
    AND DATE_PART(YEAR, TO_DATE(created_date)) >= 2020
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 6
--- Are we improving on the number of nulls in the practice field?

-- count number of opps with practice field as null, grouped by year
SELECT 
    COUNT(*) AS num_practice_field_nulls_per_year, 
    DATE_PART(YEAR, TO_DATE(created_date)) AS year_opp_created
FROM opportunity
WHERE ahead_practice_c IS NULL 
    AND year_opp_created >= 2015
GROUP BY year_opp_created
ORDER BY year_opp_created;


-------------------------------------------------------------------------------------------------
-- QUERY 7a
--- What percent of deals do we win?

-- count number of closed opps, grouped by year
WITH denominator AS (
    SELECT 
        DATE_PART(YEAR,TO_DATE(created_date)) AS year_opp_created, 
        COUNT(*) AS all_closed_opps
    FROM opportunity 
    WHERE is_closed = TRUE AND LOWER(stage_name) NOT LIKE '%duplicate%'
        AND year_opp_created >= 2020
    GROUP BY year_opp_created
    ORDER BY year_opp_created
),
-- count number of won opps, grouped by year
numerator AS (
    SELECT 
        DATE_PART(YEAR,TO_DATE(created_date)) AS year_opp_created_temp,
        COUNT(*) AS won_opps
    FROM opportunity
    WHERE is_closed = TRUE AND is_won = TRUE
        AND year_opp_created_temp >= 2020
    GROUP BY year_opp_created_temp
    ORDER BY year_opp_created_temp
),
-- divide above ctes for opp to win percent, grouped by year 
final AS (
    SELECT 
        denominator.year_opp_created,
        100*(ROUND(
        numerator.won_opps
        /
        denominator.all_closed_opps
        ,3)) AS opp_to_win_percent
    FROM denominator 
    LEFT JOIN numerator ON denominator.year_opp_created = numerator.year_opp_created_temp
    ORDER BY denominator.year_opp_created
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 7b
--- What percent of deals does Data win? 

-- filter data for data practice only 
WITH data_prac_filter AS (
    SELECT 
        *  
    FROM opportunity 
    WHERE LOWER(ahead_practice_c) = 'data' OR LOWER(ahead_practice_c) = 'data (l2)'
),
-- count number of closed opps, grouped by year
denominator AS (
    SELECT 
        DATE_PART(YEAR,TO_DATE(created_date)) AS year_opp_created, 
        COUNT(*) AS all_closed_opps
    FROM data_prac_filter 
    WHERE is_closed = TRUE AND LOWER(stage_name) NOT LIKE '%duplicate%'
    GROUP BY year_opp_created
    ORDER BY year_opp_created
),
-- count number of won opps, grouped by year
numerator AS (
    SELECT 
        DATE_PART(YEAR,TO_DATE(created_date)) AS year_opp_created_temp,
        COUNT(*) AS won_opps
    FROM data_prac_filter
    WHERE is_closed = TRUE AND is_won = TRUE
    GROUP BY year_opp_created_temp
    ORDER BY year_opp_created_temp
),
-- divide above ctes for opp to win percent, grouped by year 
final AS (
    SELECT 
        denominator.year_opp_created,
        100*(ROUND(
        numerator.won_opps
        /
        denominator.all_closed_opps
        ,3)) AS opp_to_win_percent
    FROM denominator 
    LEFT JOIN numerator ON denominator.year_opp_created = numerator.year_opp_created_temp  
    ORDER BY denominator.year_opp_created
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 8a
--- How many days does it typically take to close a data deal?

-- filter data for data practice only 
WITH data_prac_filter AS (
    SELECT 
        * 
    FROM opportunity 
    WHERE LOWER(ahead_practice_c) = 'data' OR LOWER(ahead_practice_c) = 'data (l2)'
),
-- calculate the number of days to close for each opportunity, omit opps that close in a day or less 
num_days_to_close AS (
    SELECT 
        close_date-TO_DATE(created_date) AS days_to_close
    FROM data_prac_filter
    WHERE is_closed = TRUE AND is_won = TRUE
        AND days_to_close > 1
),
-- calculate standard deviation of days to close
int_statistics AS (
    SELECT 
        STDDEV(days_to_close) AS stdev, 
        AVG(days_to_close) AS mean 
    FROM num_days_to_close
),
-- label opps whose number of days to close is an outlier 
outlier_filter AS(
    SELECT 
        days_to_close,
        CASE
            WHEN days_to_close BETWEEN mean - 3*stdev AND mean + 3*stdev THEN 'not outlier'
            ELSE 'outlier'
        END AS outlier_label
    FROM num_days_to_close
    CROSS JOIN int_statistics
),
-- calculate median and average days to close for presentation, remove outliers
final AS (
    SELECT 
        ROUND(MEDIAN(days_to_close),1) AS median_days_to_close, 
        ROUND(AVG(days_to_close),1) AS avg_days_to_close
    FROM outlier_filter
    WHERE outlier_label = 'not outlier'
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 8b
--- How does the current stage affect the number of days until close? 

-- join opportunity and opportunity field history to calculate the days to close of won opps based on their current stage 
WITH staging AS (
    SELECT 
        *,
        TO_DATE(opportunity.created_date) AS opp_created_date,
        opportunity_field_history.created_date AS change_created_date_and_time,
        TO_DATE(change_created_date_and_time) AS change_created_date,
        close_date - opp_created_date AS total_days_to_close
    FROM opportunity_field_history
    INNER JOIN opportunity ON opportunity_field_history.opportunity_id = opportunity.id
    WHERE is_closed = TRUE AND is_won = TRUE
        AND total_days_to_close > 1 AND LOWER(field) = 'stagename' 
        AND DATE_PART(YEAR, opp_created_date) >= 2021
    QUALIFY ROW_NUMBER() OVER (PARTITION BY opportunity_id, TO_DATE(change_created_date_and_time) ORDER BY    change_created_date_and_time DESC) = 1
),
-- calculate standard deviation of days to close
int_statistics AS (
    SELECT 
        STDDEV(total_days_to_close) AS stdev, 
        AVG(total_days_to_close) AS mean 
    FROM staging
),
-- label opps whose number of days to close is an outlier 
outlier_filter AS (
    SELECT 
        *,
        total_days_to_close,
    CASE
        WHEN total_days_to_close BETWEEN mean - 3*stdev AND mean + 3*stdev THEN 'not outlier'
        ELSE 'outlier'
    END AS outlier_label
    FROM staging
    CROSS JOIN int_statistics
),
-- remove opps with outlier 
remove_outliers AS (
    SELECT 
        *
    FROM outlier_filter   
    WHERE outlier_label = 'not outlier'
),
-- aggregate days to close together for presentation 
final AS (
    SELECT  
        DATE_PART(YEAR, opp_created_date) AS year_opp_created,
        -- prospecting stage name not included because all values were nulls
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) LIKE '%prospecting%lead%' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS prospecting_lead_avg_days_till_close,            
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) = 'pipeline' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS pipeline_avg_days_till_close,
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) = 'upside' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS upside_avg_days_till_close,
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) = 'strong upside' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS strong_upside_avg_days_till_close,
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) LIKE '%commit%' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS committed_avg_days_till_close
         
    FROM remove_outliers
    GROUP BY year_opp_created
    ORDER BY year_opp_created
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 8c
--- How does the current stage affect the number of days until a data opp closes? 

-- filter data for data practice only 
WITH data_prac_filter AS (
    SELECT 
        * 
    FROM opportunity 
    WHERE LOWER(ahead_practice_c) = 'data' OR LOWER(ahead_practice_c) = 'data (l2)'
),
-- join opportunity and opportunity field history to calculate the days to close of won opps based on their current stage 
staging AS (
    SELECT 
        *,
        TO_DATE(data_prac_filter.created_date) AS opp_created_date,
        opportunity_field_history.created_date AS change_created_date_and_time,
        TO_DATE(change_created_date_and_time) AS change_created_date,
        close_date - opp_created_date AS total_days_to_close
    FROM opportunity_field_history
    INNER JOIN data_prac_filter ON opportunity_field_history.opportunity_id = data_prac_filter.id
    WHERE is_closed = TRUE AND is_won = TRUE
        AND total_days_to_close > 1 AND LOWER(field) = 'stagename' 
        AND DATE_PART(YEAR, opp_created_date) >= 2021
    QUALIFY ROW_NUMBER() OVER (PARTITION BY opportunity_id, TO_DATE(change_created_date_and_time) ORDER BY    change_created_date_and_time DESC) = 1
),
-- calculate standard deviation of days to close
int_statistics AS (
    SELECT 
        STDDEV(total_days_to_close) AS stdev, 
        AVG(total_days_to_close) AS mean 
    FROM staging
),
-- label opps whose number of days to close is an outlier 
outlier_filter AS(
    SELECT 
        *,
        total_days_to_close,
    CASE
        WHEN total_days_to_close BETWEEN mean - 3*stdev AND mean + 3*stdev THEN 'not outlier'
        ELSE 'outlier'
    END AS outlier_label
    FROM staging
    CROSS JOIN int_statistics
),
-- remove opps with outlier 
remove_outliers AS (
    SELECT 
        *
    FROM outlier_filter   
    WHERE outlier_label = 'not outlier'
),
-- aggregate days to close together for presentation 
final AS (
    SELECT 
        DATE_PART(YEAR, opp_created_date) AS year_opp_created,
        -- prospecting stage name not included because all values were nulls
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) LIKE '%prospecting%lead%' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS prospecting_lead_avg_days_till_close,            
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) = 'pipeline' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS pipeline_avg_days_till_close,
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) = 'upside' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS upside_avg_days_till_close,
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) = 'strong upside' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS strong_upside_avg_days_till_close,
        ROUND(AVG(CASE 
            WHEN LOWER(new_value) LIKE '%commit%' THEN close_date - change_created_date
            ELSE NULL
        END),1) AS committed_avg_days_till_close
         
    FROM remove_outliers
    GROUP BY year_opp_created
    ORDER BY year_opp_created
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 9
--- How many data deals are 'created and won' within 0 or 1 day?

-- filter data for data practice only 
WITH data_prac_filter AS (
    SELECT 
        * 
    FROM opportunity 
    WHERE LOWER(ahead_practice_c) = 'data' OR LOWER(ahead_practice_c) = 'data (l2)'
),
-- calculate the number of days to close for each opportunity, filter for opps that closed in 0 or 1 day
num_days_to_close AS (
    SELECT 
        DATE_PART(YEAR, TO_DATE(created_date)) AS year_opp_created,
        close_date-TO_DATE(created_date) AS days_to_close
    FROM data_prac_filter
    WHERE is_closed = TRUE AND is_won = TRUE
        AND days_to_close BETWEEN 0 AND 1
),
-- count number of opps that closed in 0 or 1 day, grouped by year
final AS (
    SELECT 
        year_opp_created,
        COUNT(*) AS num_opps_0_or_1days_create_to_close
    FROM num_days_to_close
    GROUP BY year_opp_created
    ORDER BY year_opp_created
)
SELECT * FROM final;

-------------------------------------------------------------------------------------------------
-- QUERY 10
--- How often is a reason supplied for closing an opp?

-- count number of closed opps, grouped by year
WITH denominator AS (
    SELECT 
        DATE_PART(YEAR, TO_DATE(created_date)) AS year_opp_created,
        COUNT(*) AS num_opps_closed
    FROM opportunity
    WHERE is_won = FALSE AND is_closed = TRUE
        AND year_opp_created >= 2020
    GROUP BY year_opp_created
),
-- count number of opps with closing reason supplied, grouped by year
numerator AS (
    SELECT 
        DATE_PART(YEAR,TO_DATE(created_date)) AS year_opp_created_temp,
        COUNT(*) AS num_opps_closed_w_reason
    FROM opportunity
    WHERE is_won = FALSE AND is_closed = TRUE 
        AND reason_code_c IS NOT NULL
        AND year_opp_created_temp >= 2020
    GROUP BY year_opp_created_temp
),
-- percent of opps with reason for closing supplied
final AS (
    SELECT 
        denominator.year_opp_created,
        100*(ROUND(
        numerator.num_opps_closed_w_reason
        /
        denominator.num_opps_closed
        ,3)) AS reason_for_opp_closing_provided_percent
    FROM denominator 
    LEFT JOIN numerator ON denominator.year_opp_created = numerator.year_opp_created_temp  
    ORDER BY year_opp_created
)
SELECT * FROM final;
